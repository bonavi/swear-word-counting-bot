package endpoint

import (
	"context"

	"gopkg.in/telebot.v3"

	"pkg/errors"
	"swearBot/internal/services/checker/model"
)

// –ß–µ–∫–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
func (e *endpoint) checkMessage(c telebot.Context) error {

	// –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
	ctx := context.Background()

	// –¢—Ä–µ–π—Å–∏–Ω–≥
	ctx, span := tracer.Start(ctx, "checkMessage")
	defer span.End()

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	user := c.Sender()
	message := c.Message()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç
	res, err := e.service.CheckMessage(ctx, model.CheckMessageReq{
		User: model.User{
			ID:        user.ID,
			FirstName: user.FirstName,
			LastName:  user.LastName,
		},
		Message: model.Message{
			Text:     message.Text,
			Datetime: message.Time(),
			ID:       message.ID,
			ChatID:   message.Chat.ID,
		},
	})
	if err != nil {
		return err
	}

	if res.SwearsCount != 0 {
		if err = e.tgBot.React(message.Chat, message, telebot.ReactionOptions{
			Reactions: []telebot.Reaction{{
				Type:        "emoji",
				Emoji:       "üëæ",
				CustomEmoji: "",
			}},
			Big: true,
		}); err != nil {
			return errors.InternalServer.Wrap(err)
		}
	}

	// –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –µ—Å—Ç—å
	if res.Reply != "" {

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
		if err = c.Send(res.Reply); err != nil {
			return errors.InternalServer.Wrap(err)
		}
	}

	return nil
}
