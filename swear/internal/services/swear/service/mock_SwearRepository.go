// Code generated by mockery v2.46.2. DO NOT EDIT.

package service

import (
	context "context"
	model "swearBot/internal/services/swear/model"

	mock "github.com/stretchr/testify/mock"
)

// MockSwearRepository is an autogenerated mock type for the SwearRepository type
type MockSwearRepository struct {
	mock.Mock
}

// AddSwears provides a mock function with given fields: _a0, _a1
func (_m *MockSwearRepository) AddSwears(_a0 context.Context, _a1 model.AddSwearsReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddSwears")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.AddSwearsReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSwears provides a mock function with given fields: _a0
func (_m *MockSwearRepository) GetSwears(_a0 context.Context) ([]string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetSwears")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockSwearRepository creates a new instance of MockSwearRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSwearRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSwearRepository {
	mock := &MockSwearRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
